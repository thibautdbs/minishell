#!/usr/bin/env bash

################################################################################
### INIT

function my::put_usage()
{
	echo "usage: shunit_parallel [-v|--verbose] [-j|--jobs JOBSMAX] [FILE [FILE ...]]";
}

### Check dependencies.
for CMD in shunit2; do
	if ! command -v "${CMD}" >&/dev/null; then
		echo "shunit_parallel: couldn't find \`${CMD}\`." >&2;
		exit 1;
	fi
done

declare -a ARGS;
while [[ "$#" -gt 0 ]]; do
	case "$1" in
	-h|--help)
		my::put_usage;
		exit 0;
		;;
	-v|--verbose)
		shift 1;
		declare -r VERBOSE=1;
		;;
	-j|--jobs)
		if [[ ! "$2" =~ ^[0-9]+$ ]]; then
			echo "shunit_parallel: expected positive integer after -j|--jobs." >&2;
			my::put_usage;
			exit 1;
		fi
		JOBSMAX="$2";
		shift 2;
		;;
	-*)
		echo "Unknown option $1." >&2;
		my::put_usage;
		exit 1;
		;;
	*)
		ARGS+=("$1");
		shift 1;
		;;
	esac
done
set -- "${ARGS[@]}";

if [[ -z "${JOBSMAX}" ]]; then
	declare -r JOBSMAX=$(nproc);
fi

declare -ar SUITES=( "$@" );

################################################################################
### MAIN

### TMP FILES
declare -r TMP=$(mktemp -d /tmp/shunit_parallel.XXXXXXXX);
if [[ ! -d "${TMP}" ]]; then
	echo "shunit_parallel: couldn't create tmp directory." >&2;
	exit 1;
fi
mkdir -p "${TMP}/SUITES";

function my::teardown()
{
	trap - INT TERM EXIT QUIT;
	jobs -pr | xargs -r -L1 kill --;
	wait;
	rm -rf "${TMP}";
	exit "$1";
}
trap 'my::teardown $?' EXIT QUIT TERM INT;

declare -r FAILED_SUITES=$(mktemp -p "${TMP}");

### TEST RUNNER
function my::run_suite()
{
	declare -r SUITE="$1";
	flock "${TMP}" -c "mkdir -p $(dirname "${TMP}/SUITES/${SUITE}")";
	declare -r LOG="${TMP}/SUITES/${SUITE}";

	shunit2 "${SUITE}" >&"${LOG}";

	if [[ "$?" != 0 ]]; then
		flock "${FAILED_SUITES}" -c "echo '${SUITE}' >>'${FAILED_SUITES}'";
	fi
}

function my::log()
{
	sort -u | while read -r SUITE; do
		cat <<-EOF
		================ SUITE: \`${SUITE}\`
		$(cat "${TMP}/SUITES/${SUITE}")

		EOF
	done
}

for SUITE in "${SUITES[@]}"; do
	if [[ "$(jobs | wc -l)" -ge "${JOBSMAX}" ]]; then
		wait -n;
	fi
	my::run_suite "${SUITE}" >&/dev/null &
done
wait;

if [[ "${VERBOSE}" == 1 ]]; then
	my::log < <(printf "%s\n" "${SUITES[@]}");
elif [[ "$(wc -l <"${FAILED_SUITES}")" -gt 0 ]]; then
	my::log <"${FAILED_SUITES}";
fi

if [[ "$(wc -l <"${FAILED_SUITES}")" -gt 0 ]]; then
	exit 1;
fi

